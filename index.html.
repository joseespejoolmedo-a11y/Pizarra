<!DOCTYPE html>
<html lang="es" data-theme="dark">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover"/>
<title>Pizarra PRO ‚Äî gu√≠a en L + l√°piz continuo</title>
<style>
:root{--bg:#0f1317;--panel:#151a20;--line:#2a3340;--text:#e9eef4;--muted:#a7b2be;--accent:#6aa9ff;--board-bg:#0b0f13;--grid-color:rgba(255,255,255,.08)}
[data-theme="light"]{--bg:#f8f9fa;--panel:#fff;--line:#dee2e6;--text:#212529;--muted:#6c757d;--accent:#0d6efd;--board-bg:#fff;--grid-color:rgba(0,0,0,.08)}
*{box-sizing:border-box;-webkit-tap-highlight-color:transparent}
html,body{height:100%}
body{
  margin:0;display:flex;flex-direction:column;background:var(--bg);color:var(--text);
  font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;overscroll-behavior:none;
  -webkit-user-select:none;user-select:none
}
#toolbar{
  z-index:1000;display:flex;flex-wrap:wrap;gap:.5rem;align-items:center;
  background:var(--panel);border-bottom:1px solid var(--line);padding:.5rem;flex-shrink:0
}
.group{display:flex;gap:.35rem;align-items:center;background:var(--bg);border:1px solid var(--line);border-radius:.6rem;padding:.35rem .45rem}
.btn{background:var(--panel);border:1px solid var(--line);color:var(--text);padding:.45rem .6rem;border-radius:.55rem;cursor:pointer;font-weight:600}
.btn.active{outline:2px solid var(--accent)}
label{font-size:.9rem;color:var(--muted);display:flex;align-items:center;gap:.35rem}
input[type=range]{width:120px}
#colors .sw{width:26px;height:26px;border-radius:50%;border:2px solid #0008;cursor:pointer;box-shadow:0 0 0 2px #0005 inset}
#board{display:block;background:var(--board-bg);touch-action:none;flex-grow:1;height:auto;width:100%}
#toast{position:fixed;left:50%;transform:translateX(-50%);bottom:12px;background:#1f2a33;color:#fff;border:1px solid #2f3b46;border-radius:.6rem;padding:.35rem .6rem;font-size:.85rem;display:none;z-index:4}
</style>
</head>
<body>
  <div id="toolbar">
    <div class="group">
      <button class="btn" data-tool="pen">‚úèÔ∏è L√°piz</button>
      <button class="btn" data-tool="eraser">üßΩ Goma</button>
      <label>Grosor <input id="penSize" type="range" min="1" max="40" value="6"></label>
      <label>Goma <input id="eraserSize" type="range" min="6" max="80" value="22"></label>
      <label>Texto <input id="textSize" type="range" min="12" max="80" value="28"></label>
    </div>
    <div class="group" id="colors"></div>
    <div class="group">
      <span>Figuras:</span>
      <button class="btn" data-tool="line">Ôºè</button>
      <button class="btn" data-tool="arrow">‚û§</button>
      <button class="btn" data-tool="rect">‚ñ≠</button>
      <button class="btn" data-tool="ellipse">‚óØ</button>
      <button class="btn" data-tool="triangle">‚ñ≥</button>
      <button class="btn" data-tool="text">T</button>
    </div>
    <div class="group">
      <button class="btn" id="undo">‚Ü∂</button>
      <button class="btn" id="redo">‚Ü∑</button>
      <button class="btn" id="clear">üóëÔ∏è Limpiar</button>
    </div>
    <div class="group">
      <button class="btn" id="save">üñºÔ∏è PNG</button>
      <button class="btn" id="resetView">üîç 100%</button>
      <button class="btn" id="themeToggle">‚òÄÔ∏è Tema</button>
      <button class="btn" id="fsToggle">‚õ∂ Pantalla completa</button>
    </div>
  </div>

  <canvas id="board" draggable="false"></canvas>
  <div id="toast"></div>

<script>
(()=>{
// ---------- util ----------
const $=s=>document.querySelector(s);
const toastEl=$("#toast");
const toast=t=>{toastEl.textContent=t;toastEl.style.display='block';clearTimeout(toastEl._t);toastEl._t=setTimeout(()=>toastEl.style.display='none',1200)};

// ---------- canvas / c√°mara ----------
const cv=document.getElementById('board');
const ctx=cv.getContext('2d',{alpha:true,desynchronized:true});
let dpr=Math.max(1,window.devicePixelRatio||1);
let cam={x:0,y:0,s:1}; const minS=.25,maxS=8; let drawNow=true;

cv.style.touchAction='none';
let freezeResize=false;
function fit(){
  if(freezeResize) return;
  const w=cv.clientWidth,h=cv.clientHeight;
  dpr=Math.max(1,window.devicePixelRatio||1);
  cv.width=Math.round(w*dpr); cv.height=Math.round(h*dpr);
  ctx.setTransform(dpr,0,0,dpr,0,0);
  drawNow=true;
}
new ResizeObserver(fit).observe(cv); fit();

const toWorld=(px,py)=>{const r=cv.getBoundingClientRect();return {x:(px-r.width/2)/cam.s-cam.x,y:(py-r.height/2)/cam.s-cam.y}};
const worldToScreen=(wx,wy)=>{const r=cv.getBoundingClientRect();return {sx:(wx+cam.x)*cam.s+r.width/2,sy:(wy+cam.y)*cam.s+r.height/2}};
const applyCam=()=>{const r=cv.getBoundingClientRect();ctx.setTransform(dpr,0,0,dpr,0,0);ctx.translate(r.width/2,r.height/2);ctx.scale(cam.s,cam.s);ctx.translate(cam.x,cam.y)};

// ---------- UI ----------
const colors=['#ffffff','#ff3b30','#34c759','#0a84ff','#ffd60a','#ff9f0a','#a55eea','#50c8ff','#ff6b6b','#a7b2be'];
const colorsWrap=$("#colors");
colors.forEach(c=>{const d=document.createElement('div');d.className='sw';d.style.background=c;d.onclick=()=>{tool.color=c;setTool('pen')};colorsWrap.appendChild(d)});

const toolBtns=[...document.querySelectorAll('[data-tool]')];
function highlight(t){toolBtns.forEach(b=>b.classList.toggle('active',b.dataset.tool===t))}
function setTool(t){tool.mode=t;highlight(t)}
const tool={mode:'pen',color:'#ffffff',penSize:6,eraserSize:22,textSize:28};
$("#penSize").oninput=e=>tool.penSize=+e.target.value;
$("#eraserSize").oninput=e=>tool.eraserSize=+e.target.value;
$("#textSize").oninput=e=>tool.textSize=+e.target.value;
toolBtns.forEach(b=>b.onclick=()=>setTool(b.dataset.tool)); setTool('pen');

$("#themeToggle").onclick=()=>{const el=document.documentElement; el.dataset.theme = el.dataset.theme==='light'?'dark':'light'; drawNow=true;};
$("#resetView").onclick=()=>{cam={x:0,y:0,s:1};drawNow=true;toast('Vista 100%')};

const fsBtn=$("#fsToggle");
const isFS=()=>document.fullscreenElement||document.webkitFullscreenElement||document.msFullscreenElement;
const updateFSUI=()=>{fsBtn.textContent=isFS()?'ü°º Salir pantalla completa':'‚õ∂ Pantalla completa'};
async function enterFS(){const el=document.documentElement; try{if(el.requestFullscreen)await el.requestFullscreen({navigationUI:'hide'}); else if(el.webkitRequestFullscreen)el.webkitRequestFullscreen(); else if(el.msRequestFullscreen)el.msRequestFullscreen();}catch(_){}} 
async function exitFS(){try{if(document.exitFullscreen)await document.exitFullscreen(); else if(document.webkitExitFullscreen)document.webkitExitFullscreen(); else if(document.msExitFullscreen)document.msExitFullscreen();}catch(_){}} 
fsBtn.onclick=async()=>{if(isFS())await exitFS(); else await enterFS();};
document.addEventListener('fullscreenchange',()=>{updateFSUI();fit()});
document.addEventListener('webkitfullscreenchange',()=>{updateFSUI();fit()});

// ---------- p√°ginas (√∫nica) / objetos / undo ----------
let objects=[]; const objs=()=>objects;
let undoStack=[], redoStack=[];
const snap=()=>JSON.stringify({cam,objects:objects.map(o=>o.type==='image'?{...o,img:undefined}:o)});
const commit=()=>{redoStack.length=0;undoStack.push(snap());if(undoStack.length>80)undoStack.shift()};
const restore=txt=>{const s=JSON.parse(txt); cam=s.cam; objects=s.objects; drawNow=true;};
$("#undo").onclick=()=>{if(!undoStack.length)return; redoStack.push(snap()); restore(undoStack.pop()); toast('‚Ü∂');};
$("#redo").onclick=()=>{if(!redoStack.length)return; undoStack.push(snap()); restore(redoStack.pop()); toast('‚Ü∑');};

// ---------- dibujo ----------
const pointers=new Map();
let drawing=null, preview=null, pinch=null;
let lastStroke=null, activePointerId=null;

const makeStroke=(erase=false)=>({type:'stroke',color:tool.color,size:erase?tool.eraserSize:tool.penSize,erase,pts:[],_lastRenderedIdx:0});
const addPt=(st,p)=>{const last=st.pts[st.pts.length-1];const t=performance.now();const v=last?Math.hypot(p.x-last.x,p.y-last.y)/Math.max(1,t-last.t):0; st.pts.push({x:p.x,y:p.y,t,pr:p.pr||.5,v})};
function strokeW(st,pt){ if(st.erase) return st.size; const base = pt.pr>0 ? (0.35+pt.pr*0.9) : (1.10/(1+4*(pt.v||0))); return Math.max(0.8, Math.min(st.size*1.6, st.size*base)); }
function drawStroke(st){
  const pts=st.pts; if(!pts.length) return;
  ctx.save();
  ctx.globalCompositeOperation = st.erase ? 'destination-out' : 'source-over';
  ctx.strokeStyle = st.erase ? '#000' : st.color; ctx.fillStyle=ctx.strokeStyle;
  ctx.lineCap='round'; ctx.lineJoin='round';
  if(pts.length===1){const p=pts[0];const w=strokeW(st,p);ctx.beginPath();ctx.arc(p.x,p.y,w/2,0,Math.PI*2);ctx.fill();}
  else{for(let i=0;i<pts.length-1;i++){const p1=pts[i],p2=pts[i+1];const w=(strokeW(st,p1)+strokeW(st,p2))/2;ctx.lineWidth=w;ctx.beginPath();ctx.moveTo(p1.x,p1.y);ctx.lineTo(p2.x,p2.y);ctx.stroke();}}
  ctx.restore();
}
function drawShape(s,dashed=false){
  ctx.save(); ctx.globalCompositeOperation='source-over'; ctx.lineCap='round'; ctx.lineJoin='round';
  ctx.strokeStyle=s.color; ctx.lineWidth=s.size; if(dashed) ctx.setLineDash([8,6]);
  const x1=Math.min(s.x1,s.x2), y1=Math.min(s.y1,s.y2), x2=Math.max(s.x1,s.x2), y2=Math.max(s.y1,s.y2);
  const w=x2-x1,h=y2-y1; ctx.beginPath();
  if(s.shape==='line'){ctx.moveTo(s.x1,s.y1);ctx.lineTo(s.x2,s.y2);}
  else if(s.shape==='arrow'){
    ctx.moveTo(s.x1,s.y1);ctx.lineTo(s.x2,s.y2);
    const ang=Math.atan2(s.y2-s.y1,s.x2-s.x1), len=Math.max(10,8+s.size*1.5);
    ctx.moveTo(s.x2,s.y2); ctx.lineTo(s.x2-len*Math.cos(ang-Math.PI/7), s.y2-len*Math.sin(ang-Math.PI/7));
    ctx.moveTo(s.x2,s.y2); ctx.lineTo(s.x2-len*Math.cos(ang+Math.PI/7), s.y2-len*Math.sin(ang+Math.PI/7));
  }
  else if(s.shape==='rect'){ctx.rect(x1,y1,w,h);}
  else if(s.shape==='ellipse'){ctx.ellipse(x1+w/2,y1+h/2,w/2,h/2,0,0,Math.PI*2);}
  else if(s.shape==='triangle'){ctx.moveTo(x1+w/2,y1);ctx.lineTo(x1,y2);ctx.lineTo(x2,y2);ctx.closePath();}
  ctx.stroke(); ctx.restore();
}
function drawText(t){ctx.save();ctx.globalCompositeOperation='source-over';ctx.fillStyle=t.color;ctx.font=`${t.size}px system-ui,-apple-system,Segoe UI,Roboto,Arial`;ctx.textBaseline='top';ctx.fillText(t.text,t.x,t.y);ctx.restore();}

// gu√≠a en L + cuadr√≠cula
function drawGuides(){
  const accent=getComputedStyle(document.documentElement).getPropertyValue('--accent') || '#6aa9ff';
  const r=cv.getBoundingClientRect(); const start=toWorld(0,0), end=toWorld(r.width,r.height);
  ctx.save(); ctx.globalCompositeOperation='source-over'; ctx.strokeStyle=accent.trim();
  // grid
  ctx.lineWidth=1/cam.s; const step=50;
  const x0=Math.floor(start.x/step)*step, y0=Math.floor(start.y/step)*step;
  ctx.strokeStyle=getComputedStyle(document.documentElement).getPropertyValue('--grid-color'); 
  for(let x=x0;x<end.x;x+=step){ctx.beginPath();ctx.moveTo(x,start.y);ctx.lineTo(x,end.y);ctx.stroke();}
  for(let y=y0;y<end.y;y+=step){ctx.beginPath();ctx.moveTo(start.x,y);ctx.lineTo(end.x,y);ctx.stroke();}
  // axes
  ctx.strokeStyle=accent.trim(); ctx.lineWidth=Math.max(2,3/cam.s);
  ctx.beginPath(); ctx.moveTo(start.x,0); ctx.lineTo(end.x,0); ctx.moveTo(0,start.y); ctx.lineTo(0,end.y); ctx.stroke();
  // corner thick L
  ctx.lineWidth=Math.max(4,6/cam.s);
  ctx.beginPath(); ctx.moveTo(0,0); ctx.lineTo(180,0); ctx.moveTo(0,0); ctx.lineTo(0,180); ctx.stroke();
  ctx.restore();
}

function drawScene(){
  ctx.setTransform(dpr,0,0,dpr,0,0);
  ctx.clearRect(0,0,cv.width/dpr,cv.height/dpr);
  applyCam();
  drawGuides();
  for(const o of objs()){
    if(o===drawing) continue;
    if(o.type==='stroke') drawStroke(o);
    else if(o.type==='shape') drawShape(o,false);
    else if(o.type==='text')  drawText(o);
  }
}
function render(){ if(!drawNow){requestAnimationFrame(render);return} drawNow=false; drawScene(); if(drawing) drawStroke(drawing); requestAnimationFrame(render); }
render();

// ---------- entrada ----------
const getPt=e=>{const r=cv.getBoundingClientRect();const sx=e.clientX-r.left,sy=e.clientY-r.top;const w=toWorld(sx,sy);return {sx,sy,wx:w.x,wy:w.y,pr:e.pressure||.5,ptType:e.pointerType||''}};
function drawNewSegments(st){
  const pts=st.pts; const startIdx=st._lastRenderedIdx>0?st._lastRenderedIdx-1:0; if(pts.length<=startIdx) return;
  ctx.setTransform(dpr,0,0,dpr,0,0); applyCam(); ctx.save();
  ctx.globalCompositeOperation=st.erase?'destination-out':'source-over'; ctx.strokeStyle=st.erase?'#000':st.color; ctx.lineCap='round'; ctx.lineJoin='round';
  for(let i=startIdx;i<pts.length-1;i++){const p1=pts[i],p2=pts[i+1];const w=(strokeW(st,p1)+strokeW(st,p2))/2;ctx.lineWidth=w;ctx.beginPath();ctx.moveTo(p1.x,p1.y);ctx.lineTo(p2.x,p2.y);ctx.stroke();}
  ctx.restore(); st._lastRenderedIdx=pts.length;
}

const JOIN_TIME_MS=240;
function startStroke(P,erase=false,pointerType=''){
  preview=null;
  const st=makeStroke(erase);
  if(lastStroke?.pts?.length){
    const last=lastStroke.pts[lastStroke.pts.length-1];
    const dt=performance.now()-(last.t||0);
    const dist=Math.hypot(P.wx-last.x,P.wy-last.y);
    const needDist=(erase?tool.eraserSize:st.size)*1.2;
    if(dt<JOIN_TIME_MS && dist<needDist){
      st.pts.push({x:last.x,y:last.y,t:performance.now(),pr:P.pr,v:last.v});
      st._lastRenderedIdx=1;
    }
  }
  addPt(st,{x:P.wx,y:P.wy,pr:P.pr});
  objs().push(st); drawing=st; drawNow=true;
}

function pointerDown(e){
  e.preventDefault();
  if((tool.mode==='pen'||tool.mode==='eraser') && activePointerId!==null && e.pointerId!==activePointerId) return;
  cv.setPointerCapture(e.pointerId);
  const P=getPt(e); pointers.set(e.pointerId,P);

  if(tool.mode==='pen' || tool.mode==='eraser'){
    if(activePointerId===null) activePointerId=e.pointerId;
    freezeResize=true;
    startStroke(P, tool.mode==='eraser', e.pointerType||'');
    return;
  }
  const shapeTools=['line','arrow','rect','ellipse','triangle'];
  if(shapeTools.includes(tool.mode)){
    preview={type:'shape',shape:tool.mode,color:tool.color,size:tool.penSize,x1:P.wx,y1:P.wy,x2:P.wx,y2:P.wy}; drawNow=true; return;
  }
  if(tool.mode==='text'){
    const txt=prompt('Texto:'); if(!txt) return;
    objs().push({type:'text',text:txt,x:P.wx,y:P.wy,color:tool.color,size:tool.textSize}); drawNow=true; commit(); toast('Texto a√±adido');
  }
}
function pointerMove(e){
  if((tool.mode==='pen'||tool.mode==='eraser') && e.pointerId!==activePointerId) return;
  e.preventDefault();
  if(pointers.has(e.pointerId)) pointers.set(e.pointerId,getPt(e));
  if(drawing){ drawNewSegments(drawing); const p=getPt(e); addPt(drawing,{x:p.wx,y:p.wy,pr:p.pr}); return; }
  if(preview){ const p=getPt(e); preview.x2=p.wx; preview.y2=p.wy; drawNow=true; }
}
function pointerUp(e){
  if((tool.mode==='pen'||tool.mode==='eraser') && e.pointerId!==activePointerId) return;
  e.preventDefault(); pointers.delete(e.pointerId);
  if(drawing){ lastStroke=drawing; drawing=null; commit(); drawNow=true; }
  activePointerId=null; freezeResize=false;
  if(preview?.type==='shape'){ objs().push(preview); preview=null; commit(); drawNow=true; }
}
function pointerCancel(e){
  if((tool.mode==='pen'||tool.mode==='eraser') && e.pointerId!==activePointerId) return;
  freezeResize=false; activePointerId=null; pointers.delete(e.pointerId);
  if(drawing){ lastStroke=drawing; drawing=null; commit(); drawNow=true; }
}
cv.addEventListener('pointerdown',pointerDown,{passive:false});
cv.addEventListener('pointermove',pointerMove,{passive:false});
cv.addEventListener('pointerrawupdate',e=>{ if((tool.mode==='pen'||tool.mode==='eraser') && e.pointerId!==activePointerId) return; if(drawing){ const p=getPt(e); addPt(drawing,{x:p.wx,y:p.wy,pr:p.pr}); drawNewSegments(drawing);} },{passive:false});
cv.addEventListener('pointerup',pointerUp,{passive:false});
cv.addEventListener('pointercancel',pointerCancel,{passive:false});
cv.addEventListener('contextmenu',e=>e.preventDefault());

// ---------- rueda / zoom ----------
cv.addEventListener('wheel',e=>{
  e.preventDefault();
  const r=cv.getBoundingClientRect();
  const before=toWorld(e.clientX-r.left,e.clientY-r.top);
  cam.s=Math.max(minS,Math.min(maxS,cam.s*(1+(-Math.sign(e.deltaY)*0.1))));
  const after=toWorld(e.clientX-r.left,e.clientY-r.top);
  cam.x+=(after.x-before.x); cam.y+=(after.y-before.y);
  drawNow=true;
},{passive:false});

// ---------- limpiar / PNG ----------
$("#clear").onclick=()=>{if(confirm('¬øBorrar todo?')){objects.length=0;preview=null;commit();drawNow=true}};
$("#save").onclick=()=>{try{const url=cv.toDataURL('image/png');const a=document.createElement('a');a.href=url;a.download=`pizarra-${Date.now()}.png`;document.body.appendChild(a);a.click();a.remove();}catch(e){alert('Si hay im√°genes por URL sin CORS, el navegador puede bloquear el PNG.')}};

// inicio
commit(); drawNow=true; toast('Pizarra lista (gu√≠a en L) ‚ú®');
})();
</script>
</body>
</html>
